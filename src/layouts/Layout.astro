---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v3.5.1/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/v3.5.1/mapbox-gl.js"
    ></script>

    <script is:inline>
document.addEventListener("DOMContentLoaded", () => {
  if (typeof mapboxgl === "undefined") return;

  mapboxgl.accessToken =
    "pk.eyJ1IjoiZHNmc2RkZCIsImEiOiJjbHo4aTh5OGowMTN1MmtzYWo5OTMyYmZ3In0.aH6sVDseIKqSxEJYxrsToQ";
  
  const map = new mapboxgl.Map({
    container: "map",
    center: [2.8, 42.6833],
    zoom: 9,
  });

  // Helper function to determine the marker color
  function getMarkerColor(startDate) {
    const today = new Date();
    const eventDate = new Date(startDate);
    const timeDiff = eventDate - today;
    const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)); // Convert time difference to days

    if (daysDiff < 0) return "#ff0000"; // Red for past events
    if (daysDiff <= 3) return "#ffa500"; // Orange for events in 3 days or less
    return "#00ff00"; // Green for events in more than 3 days
  }

  // Restore markers from localStorage
  const markersData = JSON.parse(localStorage.getItem("markers")) || [];
  markersData.forEach((data) => {
    const color = getMarkerColor(data.startDate);

    const marker = new mapboxgl.Marker({ color })
      .setLngLat([data.longitude, data.latitude])
      .addTo(map);

    const popupContent = `<h3>${data.title}</h3><p>${data.description}</p><p>${data.startDate} - ${data.endDate}</p>`;
    const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(popupContent);
    marker.setPopup(popup);
  });

  map.on("click", (e) => {
    document.getElementById("latitude").value = e.lngLat.lat;
    document.getElementById("longitude").value = e.lngLat.lng;
  });

  document.getElementById("eventForm").addEventListener("submit", (e) => {
    e.preventDefault();

    const title = document.getElementById("title").value;
    const description = document.getElementById("description").value;
    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById("endDate").value;

    const latitude = parseFloat(document.getElementById("latitude").value);
    const longitude = parseFloat(document.getElementById("longitude").value);

    // Determine the marker color
    const color = getMarkerColor(startDate);

    // Add marker to the map
    const marker = new mapboxgl.Marker({ color })
      .setLngLat([longitude, latitude])
      .addTo(map);

    const popupContent = `<h3>${title}</h3><p>${description}</p><p>${startDate} - ${endDate}</p>`;
    const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(popupContent);
    marker.setPopup(popup);

    marker.getElement().addEventListener("mouseenter", () => marker.togglePopup());

    // Save marker data to localStorage
    const newMarkerData = {
      title,
      description,
      startDate,
      endDate,
      latitude,
      longitude,
    };
    markersData.push(newMarkerData);
    localStorage.setItem("markers", JSON.stringify(markersData));
  });

  document.getElementById("clearMarkersForm").addEventListener("submit", (e) => {
    e.preventDefault();
    localStorage.removeItem("markers");

    // Optionally, remove all markers from the map
    const markers = document.querySelectorAll(".mapboxgl-marker");
    markers.forEach(marker => marker.remove());
  });
});
    </script>
  </head>
  <body>
    <slot />
  </body>
</html>
